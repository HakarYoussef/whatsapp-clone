{"version":3,"sources":["SidebarChat.js","MoreDropdown.js","Sidebar.js","Chat.js","App.js","serviceWorker.js","index.js"],"names":["SidebarChat","name","msg","className","Avatar","MoreDropdown","Sidebar","useState","showMore","setshowMore","handleClickOutside","src","IconButton","onClick","type","placeholder","clickOutsideConfig","onClickOutside","Chat","Date","toLocaleString","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wYAgBeA,MAZf,YAAqC,IAAdC,EAAa,EAAbA,KAAMC,EAAO,EAAPA,IAC3B,OACE,yBAAKC,UAAU,eACb,kBAACC,EAAA,EAAD,MACA,yBAAKD,UAAU,qBACb,4BAAKF,GACL,2BAAIC,M,MCIGG,MAZf,WACE,OACE,yBAAKF,UAAU,YACb,yCACA,6CACA,uCACA,wCACA,yC,QCAN,SAASG,IAAW,IAAD,EACeC,oBAAS,GADxB,mBACVC,EADU,KACAC,EADA,KAGjB,OADAH,EAAQI,mBAAqB,kBAAMD,GAAY,IAE7C,yBAAKN,UAAU,WACb,yBAAKA,UAAU,mBACb,kBAACC,EAAA,EAAD,CAAQO,IAAI,0IACZ,yBAAKR,UAAU,wBACb,kBAACS,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,CAAkBC,QAAS,kBAAMJ,GAAaD,OAG/CA,GAAY,kBAAC,EAAD,QAGjB,yBAAKL,UAAU,mBACb,yBAAKA,UAAU,4BACb,kBAAC,IAAD,CAAcA,UAAU,mBACxB,2BAAOW,KAAK,OAAOC,YAAY,+BAGnC,yBAAKZ,UAAU,kBACb,kBAAC,EAAD,CAAaF,KAAK,OAAOC,IAAI,WAC7B,kBAAC,EAAD,CAAaD,KAAK,SAASC,IAAI,WAC/B,kBAAC,EAAD,CAAaD,KAAK,OAAOC,IAAI,gBAMrC,IAAMc,EAAqB,CACzBN,mBAAoB,kBAAMJ,EAAQI,qBAGrBO,cAAeX,EAASU,G,wBCKxBE,MA/Cf,WACE,OACE,yBAAKf,UAAU,QACb,yBAAKA,UAAU,gBACb,kBAACC,EAAA,EAAD,CAAQO,IAAI,0IACZ,yBAAKR,UAAU,oBACb,oCACA,4CAAiB,IAAIgB,MAAOC,mBAE9B,yBAAKjB,UAAU,qBACb,kBAACS,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,OAEF,kBAACA,EAAA,EAAD,KACE,kBAAC,IAAD,SAIN,yBAAKT,UAAU,cACb,uBAAGA,UAAU,gCACX,0BAAMA,UAAU,cAAhB,MADF,MAGE,0BAAMA,UAAU,oBAAmB,IAAIgB,MAAOC,mBAGhD,uBAAGjB,UAAU,iBACX,0BAAMA,UAAU,cAAhB,QADF,SAGE,0BAAMA,UAAU,oBAAmB,IAAIgB,MAAOC,oBAIlD,yBAAKjB,UAAU,gBACb,kBAAC,IAAD,CAAqBA,UAAU,mBAC/B,8BACE,2BAAOY,YAAY,iBAAiBD,KAAK,SACzC,4BAAQA,KAAK,UAAb,mBAEF,kBAAC,IAAD,CAAcX,UAAU,sBChCjBkB,MAXf,WACE,OACE,yBAAKlB,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,SCEYmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f8cbfd99.chunk.js","sourcesContent":["import React from 'react';\r\nimport './SidebarChat.css';\r\nimport { Avatar } from '@material-ui/core';\r\n\r\nfunction SidebarChat({ name, msg }) {\r\n  return (\r\n    <div className=\"sidebarChat\">\r\n      <Avatar />\r\n      <div className=\"sidebarChat__info\">\r\n        <h2>{name}</h2>\r\n        <p>{msg}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SidebarChat;\r\n","import React from 'react';\r\nimport './MoreDropdown.css';\r\nfunction MoreDropdown() {\r\n  return (\r\n    <div className=\"dropdown\">\r\n      <h3>New group</h3>\r\n      <h3>Create a room</h3>\r\n      <h3>Profile</h3>\r\n      <h3>Settings</h3>\r\n      <h3>Log out</h3>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default MoreDropdown;\r\n","import React, { useState } from 'react';\r\nimport './Sidebar.css';\r\nimport { RiDonutChartFill, RiSearchLine } from 'react-icons/ri';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { HiPlus, HiDotsHorizontal } from 'react-icons/hi';\r\nimport SidebarChat from './SidebarChat';\r\nimport MoreDropdown from './MoreDropdown';\r\nimport onClickOutside from 'react-onclickoutside';\r\n\r\nfunction Sidebar() {\r\n  const [showMore, setshowMore] = useState(false);\r\n  Sidebar.handleClickOutside = () => setshowMore(false);\r\n  return (\r\n    <div className=\"sidebar\">\r\n      <div className=\"sidebar__header\">\r\n        <Avatar src=\"https://images.unsplash.com/photo-1517841905240-472988babdf9?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=634&q=80\" />\r\n        <div className=\"sidebar__headerRight\">\r\n          <IconButton>\r\n            <RiDonutChartFill />\r\n          </IconButton>\r\n          <IconButton>\r\n            <HiPlus />\r\n          </IconButton>\r\n          <IconButton>\r\n            <HiDotsHorizontal onClick={() => setshowMore(!showMore)} />\r\n          </IconButton>\r\n\r\n          {showMore && <MoreDropdown />}\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__search\">\r\n        <div className=\"sidebar__searchContainer\">\r\n          <RiSearchLine className=\"MuSvgIcon-root\" />\r\n          <input type=\"text\" placeholder=\"Search or start new chat\" />\r\n        </div>\r\n      </div>\r\n      <div className=\"sidebar__chats\">\r\n        <SidebarChat name=\"Mark\" msg=\"Hello!\" />\r\n        <SidebarChat name=\"Edward\" msg=\"got it\" />\r\n        <SidebarChat name=\"Rose\" msg=\"good bye!\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst clickOutsideConfig = {\r\n  handleClickOutside: () => Sidebar.handleClickOutside,\r\n};\r\n\r\nexport default onClickOutside(Sidebar, clickOutsideConfig);\r\n","import React from 'react';\r\nimport './Chat.css';\r\nimport { Avatar, IconButton } from '@material-ui/core';\r\nimport { HiDotsHorizontal, HiOutlineEmojiHappy } from 'react-icons/hi';\r\nimport { MdAttachFile } from 'react-icons/md';\r\nimport { RiSearchLine } from 'react-icons/ri';\r\nimport { BiMicrophone } from 'react-icons/bi';\r\nfunction Chat() {\r\n  return (\r\n    <div className=\"chat\">\r\n      <div className=\"chat__header\">\r\n        <Avatar src=\"https://images.unsplash.com/photo-1522075469751-3a6694fb2f61?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=800&q=80\" />\r\n        <div className=\"chat__headerInfo\">\r\n          <h3>Mark</h3>\r\n          <p>Last seen at {new Date().toLocaleString()}</p>\r\n        </div>\r\n        <div className=\"chat__headerRight\">\r\n          <IconButton>\r\n            <RiSearchLine />\r\n          </IconButton>\r\n          <IconButton>\r\n            <MdAttachFile />\r\n          </IconButton>\r\n          <IconButton>\r\n            <HiDotsHorizontal />\r\n          </IconButton>\r\n        </div>\r\n      </div>\r\n      <div className=\"chat__body\">\r\n        <p className=\"chat__message chat__reciever\">\r\n          <span className=\"chat__name\">Me</span>\r\n          Hi!\r\n          <span className=\"chat__timestamp\">{new Date().toLocaleString()}</span>\r\n        </p>\r\n\r\n        <p className=\"chat__message\">\r\n          <span className=\"chat__name\">Mark</span>\r\n          Hello!\r\n          <span className=\"chat__timestamp\">{new Date().toLocaleString()}</span>\r\n        </p>\r\n      </div>\r\n\r\n      <div className=\"chat__footer\">\r\n        <HiOutlineEmojiHappy className=\"MuSvgIcon-root\" />\r\n        <form>\r\n          <input placeholder=\"Type a message\" type=\"text\" />\r\n          <button type=\"submit\">Send a message</button>\r\n        </form>\r\n        <BiMicrophone className=\"MuSvgIcon-root\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import React from 'react';\nimport './App.css';\nimport Sidebar from './Sidebar';\nimport Chat from './Chat';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"app__body\">\n        <Sidebar />\n        <Chat />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}